@page "/View"
@using Microsoft.EntityFrameworkCore;
@inject Context dbContext
@inject IJSRuntime JSRuntime
@inject AuthenticationService authService
@inject NavigationManager navigationManager

@code {
    // A list to store the sessions retrieved from the database
    List<HubSession>? hubSessions;

    // Variables to keep track of which button is active, editing mode, and display mode (all vs only signed-in)
    int activeButtonIndex = 0;
    bool isEditing = false;
    private bool showOnlySignedIn = true;
    private bool isDataFound;

    // Variables for pagination
    int currentPage = 1;
    int pageSize = 10;
    int totalItems;
    int totalPages;
    int totalSignedInPages;
    int totalViewAllPages;

    // Method called upon initialization
    protected override void OnInitialized()
    {
        var accountIdToCheck = 2;
        var isLoggedIn = authService.IsUserLoggedIn(accountIdToCheck);

        if (!isLoggedIn)
        {
            navigationManager.NavigateTo("/Forbidden");
        }

        LoadHubSessions(); // Load sessions when page initializes
    }

    // Loads the hub sessions based on the 'showOnlySignedIn' condition
    private void LoadHubSessions()
    {
        IQueryable<HubSession> query;

        if (showOnlySignedIn)
        {
            query = dbContext.HubSessions
            .Include(h => h.Student)
            .ThenInclude(s => s.Course)
            .Include(h => h.Student)
            .ThenInclude(s => s.Instructor)
            .Include(h => h.HubEmployee)
            .Where(h => !h.TimeOut.HasValue)
            .OrderByDescending(h => h.SessionID);

            query.Reverse();
        }
        else
        {
            query = dbContext.HubSessions
            .Include(h => h.Student)
            .ThenInclude(s => s.Course)
            .Include(h => h.Student)
            .ThenInclude(s => s.Instructor)
            .Include(h => h.HubEmployee)
            .OrderByDescending(h => h.SessionID);

            query.Reverse();
        }

        if (showOnlySignedIn)
        {
            totalItems = query.Count();
            totalSignedInPages = (int)Math.Ceiling((double)totalItems / pageSize);
            totalPages = totalSignedInPages;
        }
        else
        {
            totalItems = query.Count();
            totalViewAllPages = (int)Math.Ceiling((double)totalItems / pageSize);
            totalPages = totalViewAllPages;
        }

        // Calculate which items to display on the current page
        hubSessions = query
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize)
        .ToList();

        isDataFound = hubSessions.Any(); // Check if data is found

    }

    // Sets which button is active and updates the display mode accordingly
    void SetActiveButton(int index)
    {
        // Update the condition for displaying sessions (either all or only signed-in)
        if (index == 0)
        {
            showOnlySignedIn = true;
        }
        else if (index == 1)
        {
            showOnlySignedIn = false;
        }

        // Update the editing mode based on button index
        if (index == 2)
        {
            isEditing = true;
        }
        else
        {
            isEditing = false;
        }

        activeButtonIndex = index; // Set the active button index
        LoadHubSessions(); // Refresh the sessions
    }

    // Save the edited hub session back to the database
      async Task SaveHubSession(HubSession hubSession)
    {
        if (await JSRuntime.InvokeAsync<bool>("validateDateFormat", "timeInInput", "Invalid date format. Please enter the date in the correct format for Time In.")
            && await JSRuntime.InvokeAsync<bool>("validateDateFormat", "timeOutInput", "Invalid date format. Please enter the date in the correct format for Time Out."))
        {
            var sessionToUpdate = dbContext.HubSessions.FirstOrDefault(s => s.SessionID == hubSession.SessionID);
          
            if (sessionToUpdate != null)
            {
                sessionToUpdate.TimeIn = hubSession.TimeIn;
                sessionToUpdate.TimeOut = hubSession.TimeOut;
                sessionToUpdate.EmployeeID = hubSession.EmployeeID;
                sessionToUpdate.SessionType = hubSession.SessionType;
                dbContext.SaveChanges();
            }
            isEditing = false; // Exit editing mode
            LoadHubSessions(); // Refresh the sessions
        }
    }

    // Handle the action of signing out a student
    void SignOutStudent(HubSession hubSession)
    {
        var sessionToUpdate = dbContext.HubSessions.FirstOrDefault(s => s.SessionID == hubSession.SessionID);
        if (sessionToUpdate != null && !sessionToUpdate.TimeOut.HasValue)
        {
            var currentTime = DateTime.Now.TimeOfDay; // Fetch the current time
            var truncatedTime = new TimeSpan(currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
            sessionToUpdate.TimeOut = truncatedTime; // Update the sign-out time
            dbContext.SaveChanges(); // Persist the changes
            LoadHubSessions(); // Refresh the sessions
        }
    }

    void ChangePage(int page)
    {
        currentPage = page;
        LoadHubSessions(); // Refresh the sessions for the selected page
    }

    void MovePages(int offset)
    {
        currentPage += offset;
        LoadHubSessions(); // Refresh the sessions for the new page range
    }

    IEnumerable<int> GetPageRange()
    {
        int startPage = Math.Max(1, currentPage - 4);
        int endPage = Math.Min(totalPages, startPage + 9);
        return Enumerable.Range(startPage, endPage - startPage + 1);
    }

    // Format total time in a human-readable format
    string FormatTotalTime(TimeSpan totalTime)
    {
        int hours = (int)totalTime.TotalHours;
        int minutes = totalTime.Minutes;
        int seconds = totalTime.Seconds;

        if (hours > 0 && minutes > 0)
        {
            return $"{hours} hr {minutes} min";
        }
        else if (hours > 0)
        {
            return $"{hours} hr";
        }
        else if (minutes > 0)
        {
            return $"{minutes} min";
        }
        else
        {
            return $"{seconds} sec";
        }
    }
}

<PageTitle>View Students 😀</PageTitle>

<div class="container-md card mb-3 shadow-lg">
    <div class="d-flex justify-content-between py-4">
        <div class="button-container">
            <button class="btn btn-primary @(activeButtonIndex == 0 ? "active" : "inactive")"
                @onclick="() => SetActiveButton(0)">Signed-In</button>
            <button class="btn btn-primary @(activeButtonIndex == 1 ? "active" : "inactive")"
                @onclick="() => SetActiveButton(1)">View All</button>
        </div>
        <div>
            <button class="btn btn-primary @(activeButtonIndex == 2 ? "active" : "inactive")"
                @onclick="() => SetActiveButton(2)">Edit</button>
        </div>
    </div>
    <div style="overflow-x: auto">
        @if (isDataFound)
        {
            <table class="table">
                <thead>
                    <tr class="table-header">
                        <th>Date</th>
                        <th>Count</th>
                        <th>Name</th>
                        <th>ID</th>
                        <th>Course</th>
                        <th>Instructor</th>
                        <th>Time In</th>
                        @if (!showOnlySignedIn)
                        {
                            <th class="text-nowrap">Time Out</th>
                        }
                        else
                        {
                            <th>Sign Out</th>
                        }
                        <th>Initial</th>
                        <th>Session</th>
                        @if (!showOnlySignedIn)
                        {
                            <th style="width: 30px;">Total Time</th>
                        }
                        @if (isEditing)
                        {
                            <th>Edit</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @if (hubSessions != null)
                    {
                        @foreach (var hubSession in hubSessions)
                        {
                            <tr>
                                <td>@hubSession.Date.ToString("MM/dd/yyyy")</td>
                                @if (hubSession.Student != null)
                                {
                                    <td>@hubSession.SessionID</td>
                                    <td class="text-nowrap">@hubSession.Student.FirstName @hubSession.Student.LastName</td>
                                    <td>@hubSession.Student.StudentID</td>
                                    <td>@hubSession.Student?.Course?.CourseName</td>
                                    <td class="text-nowrap">@hubSession.Student?.Instructor?.FirstName
                                        @hubSession.Student?.Instructor?.LastName</td>
                                }
                                <td class="text-nowrap">
                                    @if (isEditing)
                                    {
                                        <input type="text" class="form-control" @bind="hubSession.TimeIn" />
                                    }
                                    else if (DateTime.TryParse(hubSession.TimeIn.ToString(), out DateTime timeIn))
                                    {
                                        @timeIn.ToString("h:mm tt")
                                    }
                                    else
                                    {
                                        <text>Invalid Time</text>
                                    }
                                </td>

                                <td class="text-nowrap">
                                    @if (isEditing && !showOnlySignedIn)
                                    {
                                        @if (!hubSession.TimeOut.HasValue)
                                        {
                                            <input type="text" class="form-control" readonly />
                                        }
                                        else
                                        {
                                            <input type="text" class="form-control" pattern="(?:[01]\d|2[0-3]):(?:[0-5]\d)"
                                                title="Enter a valid time (HH:mm)" @bind="hubSession.TimeOut" />
                                        }
                                    }
                                    else if (!hubSession.TimeOut.HasValue)
                                    {
                                        <button class="btn btn-sm btn-primary" @onclick="() => SignOutStudent(hubSession)">Sign
                                            Out</button>
                                    }
                                    else
                                    {
                                        @if (DateTime.TryParse(hubSession.TimeOut.ToString(), out DateTime timeOut))
                                        {
                                            @timeOut.ToString("h:mm tt")
                                        }
                                        else
                                        {
                                            <text>Invalid Time</text>
                                        }
                                    }
                                </td>
                                <td>
                                    @if (isEditing)
                                    {
                                        <select class="select" @bind="hubSession.EmployeeID">
                                            @foreach (var employee in dbContext.HubEmployees)
                                            {
                                                <option value="@employee.EmployeeID">@employee.Initials</option>
                                            }
                                        </select>
                                    }
                                    else
                                    {
                                        @if (hubSession.HubEmployee != null)
                                        {
                                            @hubSession.HubEmployee.Initials
                                        }
                                    }
                                </td>
                                <td>
                                    @if (isEditing)
                                    {
                                        <select class="select" style="" @bind="hubSession.SessionType">
                                            @foreach (var sType in dbContext.HubSessions.Select(h => h.SessionType).Distinct())
                                            {
                                                <option value="@sType">@sType</option>
                                            }
                                        </select>
                                    }
                                    else
                                    {
                                        @hubSession.SessionType
                                    }
                                </td>
                                @if (!showOnlySignedIn)
                                {
                                    if (hubSession.TimeOut > hubSession.TimeIn)
                                    {
                                        var totalTime = hubSession.TimeOut - hubSession.TimeIn;
                                        <td class="text-nowrap">@(totalTime != null ? FormatTotalTime(totalTime.Value) : "")</td>
                                    }
                                    else if (hubSession.TimeOut == null)
                                    {
                                        <td class="text-nowrap" style="color: orange;">In Progress</td>
                                    }
                                    else
                                    {
                                        <td class="text-nowrap" style="color: red;">Invalid time input</td>
                                    }
                                }

                                @if (isEditing)
                                {
                                    <td>
                                        <button class="btn btn-sm btn-primary" @onclick="() => SaveHubSession(hubSession)">Save</button>                                    
                                    </td>
                                }
                            </tr>
                        }
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <h1>No students are signed in</h1>
                        </div>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="alert alert-warning text-center">
                No Students Signed-In
            </div>
        }
    </div>
    @if (!showOnlySignedIn || totalSignedInPages >= 11)
    {

        <div class="pagination-container">
            <ul class="pagination">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <a class="page-link" @onclick="() => MovePages(-1)" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>

                @foreach (var pageNumber in GetPageRange())
                {
                    <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                        <a class="page-link" @onclick="() => ChangePage(pageNumber)"
                            style="pointer-events: @(showOnlySignedIn ? (pageNumber <= totalSignedInPages ? "auto" : "none") : "auto")">
                            @pageNumber
                        </a>
                    </li>
                }

                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <a class="page-link" @onclick="() => MovePages(1)" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            </ul>
        </div>
    }
</div>
