@page "/View"
@using Microsoft.EntityFrameworkCore;
@inject Context dbContext

@code {
    // A list to store the sessions retrieved from the database
    List<HubSession>? hubSessions;

    // Variables to keep track of which button is active, editing mode, and display mode (all vs only signed-in)
    int activeButtonIndex = 0;
    bool isEditing = false;
    private bool showOnlySignedIn = true;

    // Variables for pagination
    int currentPage = 1;
    int pageSize = 10; 
    int totalItems;
    int totalPages;


    // Method called upon initialization
    protected override void OnInitialized()
    {
        LoadHubSessions(); // Load sessions when page initializes
    }

    // Loads the hub sessions based on the 'showOnlySignedIn' condition
    private void LoadHubSessions()
    {
        IQueryable<HubSession> query;
        
        if (showOnlySignedIn)
        {
            query = dbContext.HubSessions
                .Include(h => h.Student)
                .ThenInclude(s => s.Course)
                .Include(h => h.Student)
                .ThenInclude(s => s.Instructor)
                .Include(h => h.HubEmployee)
                .Where(h => !h.TimeOut.HasValue)
                .OrderByDescending(h => h.SessionID);
        
            query.Reverse();
        }
        else
        {
            query = dbContext.HubSessions
                .Include(h => h.Student)
                .ThenInclude(s => s.Course)
                .Include(h => h.Student)
                .ThenInclude(s => s.Instructor)
                .Include(h => h.HubEmployee)
                .OrderByDescending(h => h.SessionID);

            query.Reverse();
        }

        totalItems = query.Count();
        totalPages = (int)Math.Ceiling((double)totalItems / pageSize);

        // Calculate which items to display on the current page
        hubSessions = query
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
            
    }

    // Sets which button is active and updates the display mode accordingly
    void SetActiveButton(int index)
    {
        // Update the condition for displaying sessions (either all or only signed-in)
        if (index == 0)
        {
            showOnlySignedIn = true;
        }
        else if(index == 1)
        {
            showOnlySignedIn = false;
        }

        // Update the editing mode based on button index
        if (index == 2)
        {
            isEditing = true;
        }
        else
        {
            isEditing = false;
        }

        activeButtonIndex = index; // Set the active button index
        LoadHubSessions(); // Refresh the sessions
    }

    // Save the edited hub session back to the database
    void SaveHubSession(HubSession hubSession)
    {
        var sessionToUpdate = dbContext.HubSessions.FirstOrDefault(s => s.SessionID == hubSession.SessionID);
        if (sessionToUpdate != null)
        {
            sessionToUpdate.TimeIn = hubSession.TimeIn;
            sessionToUpdate.TimeOut = hubSession.TimeOut;
            sessionToUpdate.EmployeeID = hubSession.EmployeeID;
            sessionToUpdate.SessionType = hubSession.SessionType;
            dbContext.SaveChanges();
        }
        isEditing = false;// Exit editing mode
        LoadHubSessions(); // Refresh the sessions
    }

    // Handle the action of signing out a student
    void SignOutStudent(HubSession hubSession)
    {
        var sessionToUpdate = dbContext.HubSessions.FirstOrDefault(s => s.SessionID == hubSession.SessionID);
        if (sessionToUpdate != null && !sessionToUpdate.TimeOut.HasValue)
        {
            var currentTime = DateTime.Now.TimeOfDay; // Fetch the current time
            var truncatedTime = new TimeSpan(currentTime.Hours, currentTime.Minutes, currentTime.Seconds); // Truncate to remove milliseconds
            sessionToUpdate.TimeOut = truncatedTime; // Update the sign-out time
            dbContext.SaveChanges(); // Persist the changes
            LoadHubSessions(); // Refresh the sessions
        }
    }

    void ChangePage(int page)
    {
        currentPage = page;
        LoadHubSessions(); // Refresh the sessions for the selected page
        Console.WriteLine("total items " + totalItems);
        Console.WriteLine("ChangePage called with page: " + page);
    }

        string FormatTotalTime(TimeSpan totalTime)
    {
        int hours = (int)totalTime.TotalHours;
        int minutes = totalTime.Minutes;

        if (hours > 0 && minutes > 0)
        {
            return $"{hours} hr {minutes} min";
        }
        else if (hours > 0)
        {
            return $"{hours} hr";
        }
        else if (minutes > 0)
        {
            return $"{minutes} min";
        }
        else
        {
            return ""; 
        }
    }



}

<!-- HTML code for rendering the view -->

<PageTitle>View Students 😀</PageTitle>

<div class="container-md">
    <div class="d-flex justify-content-between pb-4">
        <div class="button-container">
            <button class="btn btn-primary @(activeButtonIndex == 0 ? "active" : "inactive")"
                @onclick="() => SetActiveButton(0)">Signed-In</button>
            <button class="btn btn-primary @(activeButtonIndex == 1 ? "active" : "inactive")"
                @onclick="() => SetActiveButton(1)">View All</button>
        </div>
        <div>
            <button class="btn btn-primary @(activeButtonIndex == 2 ? "active" : "inactive")"
                @onclick="() => SetActiveButton(2)">Edit</button>
        </div>
    </div>

    <table class="table">
        <thead>
            <tr class="table-header">
                <th>Date</th>
                <th>Count</th>
                <th>Name</th>
                <th>ID</th>
                <th>Course</th>
                <th>Instructor</th>
                <th>Time In</th>
                @if (!showOnlySignedIn)
                {
                    <th>Time Out</th>
                }
                else
                {
                    <th>Sign Out</th>
                }
                <th>Initial</th>
                <th>Session</th>
                @if (!showOnlySignedIn)
                {
                    <th>Total Time</th>
                }
                @if (isEditing)
                {
                    <th>Edit</th>
                }
            </tr>
        </thead>
        <tbody>
            @if (hubSessions != null)
            {

                foreach (var hubSession in hubSessions)
                {
                    <tr>
                        <td>@hubSession.Date.ToString("MM/dd/yyyy")</td>
                        @if (hubSession.Student != null){
                        <td>@hubSession.SessionID</td>
                        <td>@hubSession.Student.FirstName @hubSession.Student.LastName</td>
                        <td>@hubSession.Student.StudentID</td>
                        <td>@hubSession.Student?.Course?.CourseName</td>
                        <td>@hubSession.Student?.Instructor?.FirstName @hubSession.Student?.Instructor?.LastName</td>
                        }
                        <td>
                            @if (isEditing)
                            {
                                <input type="text" @bind="hubSession.TimeIn" />
                            }
                            else
                            {
                                @hubSession.TimeIn
                            }
                        </td>

                        <td>
                            @if (isEditing && !showOnlySignedIn)
                            {
                                <input type="text" @bind="hubSession.TimeOut" />
                            }
                            else if (!hubSession.TimeOut.HasValue)
                            {
                                <button class="btn btn-sm btn-primary" @onclick="() => SignOutStudent(hubSession)">Sign Out</button>
                            }
                            else
                            {
                                @hubSession.TimeOut

                            }
                        </td>
                        <td>
                            @if (isEditing)
                            {
                                <select @bind="hubSession.EmployeeID">
                                    @foreach (var employee in dbContext.HubEmployees)
                                    {
                                        <option value="@employee.EmployeeID">@employee.Initials</option>
                                    }
                                </select>
                            }
                            else
                            {
                                @if (hubSession.HubEmployee != null){
                                @hubSession.HubEmployee.Initials
                                }
                            }
                        </td>
                        <td>
                            @if (isEditing)
                            {
                                <select @bind="hubSession.SessionType">
                                    @foreach (var sType in dbContext.HubSessions.Select(h => h.SessionType).Distinct())
                                    {
                                        <option value="@sType">@sType</option>
                                    }
                                </select>
                            }
                            else
                            {
                                @hubSession.SessionType
                            }
                        </td>
                        @if (!showOnlySignedIn)
                        {
                            if(hubSession.TimeOut> hubSession.TimeIn){
                            var totalTime = hubSession.TimeOut - hubSession.TimeIn;
                            <td>@(totalTime != null ? FormatTotalTime(totalTime.Value) : "")</td>
                            }
                            else if(hubSession.TimeOut == null){
                              <td style="color: orange;">In Progress</td>  
                            }
                            else{
                                <td style="color: red;">Invalid time input</td>
                            }
                        }

                        @if (isEditing)
                        {
                            <td>
                                <button class="btn btn-sm btn-primary" @onclick="() => SaveHubSession(hubSession)">Save</button>
                            </td>
                        }
                    </tr>
                }
            }
            

        </tbody>
    </table>
    <div class="pagination-container">
        <ul class="pagination">
            @for (int page = 1; page <= totalPages; page++)
            {
                int localPage = page; // Create a local copy of page
                <li class="page-item @(localPage == currentPage ? "active" : "")">
                    <a class="page-link" @onclick="() => ChangePage(localPage)">@localPage</a>
                </li>
            }


        </ul>
    </div>

</div>
