@inject Context dbContext
@inject NavigationManager navigationManager
@page "/Reports"
<div class="container">
    <div class="row">
        <div class="col-md-5 d-flex justify-content-center flex-column align-content-center">
            <label for="startDate">From:</label>

            <input type="date" id="startDate" name="startDate" @bind="startDate" @oninput="StartDateChanged"
                class="form-control">
        </div>
        <div class="col-md-5 d-flex justify-content-center flex-column align-content-center">
            <label for="endDate">To:</label>

            <input type="date" id="endDate" name="endDate" @bind="endDate" @oninput="EndDateChanged"
                class="form-control">
        </div>
    </div>
    <div>
        <table class="table mt-5">
            <thead>
                <tr class="table-header">
                    <th>Questions</th>
                    <th>Testing</th>
                    <th>Tutoring</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>How many hours was the math hub used?</td>
                    <td>@FormatTotalTime(TimeSpan.FromHours(HoursTesting))</td>
                    <td>@FormatTotalTime(TimeSpan.FromHours(HoursTutoring))</td>
                    <td>@FormatTotalTime(TimeSpan.FromHours(HoursTesting + HoursTutoring))</td>
                </tr>
                <tr>
                    <td>How many students used the math hub?</td>
                    <td>@StudentsTesting</td>
                    <td>@StudentsTutoring</td>
                    <td>@(StudentsTesting + StudentsTutoring)</td>
                </tr>
                <tr>
                    <td>How many distinct students used the math hub?</td>
                    <td>@DistinctStudentsTesting</td>
                    <td>@DistinctStudentsTutoring</td>
                    <td>@(DistinctStudentsTesting + DistinctStudentsTutoring)</td>
                </tr>
            </tbody>
        </table>

    </div>
        <button class="btn btn-primary mt-3" @onclick="ShowDetailedReport"> View more detailed report </button>
</div>
@code {
    private double HoursTesting { get; set; }
    private int StudentsTesting { get; set; }
    private int DistinctStudentsTesting { get; set; }
    private double HoursTutoring { get; set; }
    private int StudentsTutoring { get; set; }
    private int DistinctStudentsTutoring { get; set; }

    private DateTime? startDate { get; set; } = DateTime.Now.Date;
    private DateTime? endDate { get; set; } = DateTime.Now.Date;

    protected override void OnInitialized()
    {
        startDate = DateTime.Now.Date;
        endDate = DateTime.Now.Date;
    }
    private void FetchData()
    {
        List<HubSession> ? testing = null;
        List<HubSession> ? tutoring = null;

        // Check if both start and end dates are selected
        if (startDate.HasValue && endDate.HasValue)
        {
            // Filter data between start and end dates
            testing = dbContext.HubSessions
            .Where(s => s.Date >= startDate && s.Date <= endDate && s.SessionType == "Testing" && s.TimeOut!= null)
            .ToList();

            tutoring = dbContext.HubSessions
            .Where(s => s.Date >= startDate && s.Date <= endDate && s.SessionType == "Tutoring" && s.TimeOut!= null)
            .ToList();
        }
        else if (startDate.HasValue)
        {
            // Start date is selected, but end date is not
            // Filter data from start date to the current date
            var currentDate = DateTime.Now.Date;
            Console.WriteLine("Dates from " + startDate + " to " + currentDate);
            testing = dbContext.HubSessions
            .Where(s => s.Date >= startDate && s.Date <= currentDate && s.SessionType == "Testing" && s.TimeOut!= null)
            .ToList();

            tutoring = dbContext.HubSessions
            .Where(s => s.Date >= startDate && s.Date <= currentDate && s.SessionType == "Tutoring" && s.TimeOut!= null)
            .ToList();
        }
        else if (endDate.HasValue)
        {
            Console.WriteLine("Dates from " + startDate + " to " + endDate);
            // End date is selected, but start date is not
            // Filter data from the beginning till the end date
            testing = dbContext.HubSessions
            .Where(s => s.Date <= endDate && s.SessionType == "Testing" && s.TimeOut!= null)
            .ToList();

            tutoring = dbContext.HubSessions
            .Where(s => s.Date <= endDate && s.SessionType == "Tutoring" && s.TimeOut!= null)
            .ToList();
        }
        else
        {
            // Both start and end dates are empty, so don't show any data
            HoursTesting = 0;
            HoursTutoring = 0;
            StudentsTesting = 0;
            StudentsTutoring = 0;
            DistinctStudentsTesting = 0;
            DistinctStudentsTutoring = 0;
            StateHasChanged();
            return;
        }

        HoursTesting = Math.Round(testing.Sum(s => ((s.TimeOut ?? TimeSpan.Zero) - s.TimeIn).TotalHours), 2);
        HoursTutoring = Math.Round(tutoring.Sum(s => ((s.TimeOut ?? TimeSpan.Zero) - s.TimeIn).TotalHours), 2);

        StudentsTesting = testing.Count;
        StudentsTutoring = tutoring.Count;

        DistinctStudentsTesting = testing.Select(s => s.StudentID).Distinct().Count();
        DistinctStudentsTutoring = tutoring.Select(s => s.StudentID).Distinct().Count();

        StateHasChanged();
    }


  private void StartDateChanged(ChangeEventArgs e)
{
    if (e.Value != null)
    {
        string dateString = e.Value.ToString()!;
        if (!string.IsNullOrEmpty(dateString))
        {
            startDate = DateTime.Parse(dateString);
            FetchData();
        }
    }
}

private void EndDateChanged(ChangeEventArgs e)
{
    if (e.Value != null)
    {
        string dateString = e.Value.ToString()!;
        if (!string.IsNullOrEmpty(dateString))
        {
            endDate = DateTime.Parse(dateString);
            FetchData();
        }
    }
}

    private void ShowDetailedReport()
    {
               // Pass the selected dates as route parameters
           navigationManager.NavigateTo($"/Reports/Detailed/{startDate:yyyy-MM-dd}/{endDate:yyyy-MM-dd}");
        
    }

     string FormatTotalTime(TimeSpan? totalTime)
{
    if (totalTime.HasValue)
    {
        int hours = totalTime.Value.Hours;
        int minutes = totalTime.Value.Minutes;
        int seconds = totalTime.Value.Seconds;

        if (hours > 0 && minutes > 0)
        {
            return $"{hours} hr {minutes} min";
        }
        else if (hours > 0)
        {
            return $"{hours} hr";
        }
        else if (minutes > 0)
        {
            return $"{minutes} min";
        }
        else
        {
            return $"{seconds} sec";
        }
    }
    else
    {
        return "N/A"; // default value for null TimeSpan
    }
}

}
