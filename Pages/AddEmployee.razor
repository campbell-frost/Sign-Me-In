@page "/Employee/AddEmployee"
@inject Context dbContext
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@inject AuthenticationService authService
@inject NavigationManager navigationManager
@using System.Text.RegularExpressions


@code {
    // Properties to store employee details
    private String firstName;
    private String lastName;
    private int? employeeID;
    private String employeeInitials;
    private String hubRole;
    private int accountID;
    private bool showDuplicateEmployeeIDAlert = false;


    // Flag to track if the employee has been successfully inserted
    private bool inserted = false;
    // Flag to track if any form fields are empty
    private bool isFormIncomplete = false;

    //For input validation
    private string firstNameError;
    private string lastNameError;
    private string employeeIDError;
    private string employeeInitialsError;
    private string hubRoleError;

    protected override void OnInitialized()
    {
        // Account ID to check for user login
        var accountIdToCheck = 1;

        // Check if the user is logged in
        var isLoggedIn = authService.IsUserLoggedIn(accountIdToCheck);

        // Redirect to Forbidden page if not logged in
        if (!isLoggedIn)
        {
            navigationManager.NavigateTo("/Forbidden");
        }
    }

    // Method to validate form fields
    private bool ValidateForm()
    {
        // Reset error messages
        firstNameError = string.Empty;
        lastNameError = string.Empty;
        employeeIDError = string.Empty;
        employeeInitialsError = string.Empty;
        hubRoleError = string.Empty;

        bool isValid = true;

        // Validation for First Name
        if (string.IsNullOrEmpty(firstName))
        {
            firstNameError = "First Name is required.";
            isValid = false;
        }
        else if (!Regex.IsMatch(firstName, "^[A-Za-z']+$"))
        {
            firstNameError = "First Name should contain only letters.";
            isValid = false;
        }
        // Validation for Last Name
        if (string.IsNullOrEmpty(lastName))
        {
            lastNameError = "Last Name is required.";
            isValid = false;
        }
        else if (!Regex.IsMatch(lastName, "^[A-Za-z']+$"))
        {
            lastNameError = "Last Name should contain only letters.";
            isValid = false;
        }
        // Validation for Employee ID
        if (!employeeID.HasValue)
        {
            employeeIDError = "Employee ID is required.";
            isValid = false;
        }

        // Validation for Last Name
        if (string.IsNullOrEmpty(employeeInitials))
        {
            employeeInitialsError = "Employee Initials is required.";
            isValid = false;
        }
        else if (!Regex.IsMatch(employeeInitials, "^[A-Za-z']+$"))
        {
            employeeInitialsError = "Employee Initials should contain only letters.";
            isValid = false;
        }
        // Validation for Hub Role
        if (string.IsNullOrEmpty(hubRole))
        {
            hubRoleError = "Hub Role is required.";
            isValid = false;
        }

        isFormIncomplete = !isValid;
        return isValid;
    }


    // Method to insert a new employee
    private void insertEmployee()
    {
        if (ValidateForm())
        {
            // Check if an employee with the same Employee ID already exists
            bool isDuplicateEmployeeID = dbContext.HubEmployees.Any(e => e.EmployeeID == (employeeID ?? 0));

            if (isDuplicateEmployeeID)
            {
                // Set the property to show the duplicate employee ID alert
                showDuplicateEmployeeIDAlert = true;
                return;
            }

            // Set accountID based on hubRole
            if (hubRole == "Testing Assistant" || hubRole == "Tutor" || hubRole == "Both")
            {
                accountID = 2;
            }
            else
            {
                accountID = 1;
            }

            // Enable IDENTITY_INSERT
            dbContext.Database.OpenConnection();
            dbContext.Database.ExecuteSqlRaw("SET IDENTITY_INSERT HubEmployees ON");



            // Create a new employee object
            var newEmployee = new HubEmployee
                {
                    FirstName = firstName,
                    LastName = lastName,
                    EmployeeID = employeeID ?? 0,
                    Initials = employeeInitials,
                    Role = hubRole,
                    AccountID = accountID
                };

            // Add the new employee to the database and save changes
            dbContext.HubEmployees.Add(newEmployee);
            dbContext.SaveChanges();

            // Set inserted flag to true
            inserted = true;

            // Disable IDENTITY_INSERT and close the connection
            dbContext.Database.ExecuteSqlRaw("SET IDENTITY_INSERT HubEmployees OFF");
            dbContext.Database.CloseConnection();
        }
    }

    // Method to navigate back to the Employee page
    private void goBackToEmployee()
    {
        navigationManager.NavigateTo("/Employee");
    }
}
@if (!inserted)
{
    <!-- Form for adding a new employee -->
    <div class="container container-custom card shadow-lg pb-3">
        <div class="row pt-3">
            <div class="col-md-6">
                <label>First Name:</label>
                <div class="form-group">
                    <div class="input-group">
                        <input type="text" class="form-control shadow-none" @bind="firstName" />
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <label>Last Name:</label>
                <div class="form-group">
                    <div class="input-group">
                        <input type="text" class="form-control shadow-none" @bind="lastName" />
                    </div>
                </div>
            </div>
        </div>
        <div class="row py-3">
            <div class="col-md-6">
                <label>Employee ID:</label>
                <div class="form-group">
                    <div class="input-group">
                        <input type="text" class="form-control shadow-none" @bind="employeeID" />
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <label>Employee Initials:</label>
                <div class="form-group">
                    <div class="input-group">
                        <input type="text" class="form-control shadow-none" @bind="employeeInitials" />
                    </div>
                </div>
            </div>
        </div>
        <div class="row py-3">
            <div class="col-md-12 text-start">
                <label>Hub Role:</label>
                <div class="input-group">
                    <div class="form-group w-100">
                        <select class="dropdown shadow-none custom" @bind="hubRole">
                            <option value="">Select Hub Role</option>
                            <option value="Tutor">Tutor</option>
                            <option value="Testing Assistant">Testing Assistant</option>
                            <option value="Both">Both</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
        @if (showDuplicateEmployeeIDAlert)
        {
            <div class="alert alert-danger mt-3" role="alert">
                <label>An employee with the same Employee ID already exists. Please choose a different Employee ID.</label>
            </div>
        }

        @if (isFormIncomplete)
        {
            <div class="alert alert-warning text-center">
                <h5>Please fill out all of the fields</h5>
                <ul>
                    @if (!string.IsNullOrEmpty(firstNameError))
                    {
                        <li>@firstNameError</li>
                    }
                    @if (!string.IsNullOrEmpty(lastNameError))
                    {
                        <li>@lastNameError</li>
                    }
                    @if (!string.IsNullOrEmpty(employeeIDError))
                    {
                        <li>@employeeIDError</li>
                    }
                    @if (!string.IsNullOrEmpty(employeeInitialsError))
                    {
                        <li>@employeeInitialsError</li>
                    }
                    @if (!string.IsNullOrEmpty(hubRoleError))
                    {
                        <li>@hubRoleError</li>
                    }
                </ul>
            </div>
        }

        <div class="row pt-3">
            <div class="col-md-6 text-center">
                <button class="btn btn-primary btn-block" @onclick="goBackToEmployee">Back</button>
            </div>
            <div class="col-md-6 text-center">
                <button class="btn btn-primary btn-block" @onclick="insertEmployee">Insert Employee</button>
            </div>
        </div>
    </div>
}

@if (inserted)
{
    <div class="d-flex justify-content-center">
        <div class="card shadow-lg">

            <div class="alert alert-success mt-3 text-center" role="alert">
                <label>@firstName @lastName inserted successfully.</label>
            </div>
            <div class="row my-3 justify-content-center">
                <div class="col-md-12 d-flex justify-content-center">
                    <button class="btn btn-primary" @onclick="goBackToEmployee">Done</button>
                </div>
            </div>
        </div>
    </div>
}
