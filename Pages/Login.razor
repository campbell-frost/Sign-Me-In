@layout LoginLayout
@inject Context dbContext
@inject NavigationManager navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationService authService

@page "/"

<PageTitle>Login</PageTitle>
<div class="background">
    <div class="login-container small">
        <div class="login-box text-center md">
            <div class="row">
                <div class="logo col-md-12 text-start">
                    <img src="FDTC-LOGO2.png" alt="Logo" class="login-logo mb-4 align-content-end" />
                </div>
            </div>
            <form @onsubmit="HandleLogin">
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group pb-2 w-100">
                            <input type="text" @bind="username" class="form-control shadow-none"
                                placeholder="Username" />
                        </div>
                        <div class="form-group w-100 pb-3">
                            <input type="password" @bind="password" class="form-control shadow-none"
                                placeholder="Password" />
                        </div>
                    </div>
                </div>
                <div class="row text-end">
                    <div class="col-md-12 text-end">
                        <div class="m-custom">
                            <button type="submit" class="btn btn-primary">Login</button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>


@code {

    private string username = "";
    private string password = "";

   private async Task HandleLogin()
{
    var user = dbContext.Accounts.FirstOrDefault(u => u.UserName == username);

    if (user != null)
    {
        // Use BCrypt to verify the entered password against the stored hashed password
        bool isPasswordCorrect = BCrypt.Net.BCrypt.Verify(password, user.PasswordHash);

        if (isPasswordCorrect)
        {
            authService.SetLoggedInUser(user); // Set the logged-in user
            navigation.NavigateTo("/HomePage");
            Console.WriteLine($"User Account ID: {user.AccountID}");
        }
        else
        {
            username = "";
            password = "";
            await JSRuntime.InvokeVoidAsync("alert", "Invalid username or password.");
        }
    }
    else
    {
        username = "";
        password = "";
        await JSRuntime.InvokeVoidAsync("alert", "User not found.");
    }
}
}