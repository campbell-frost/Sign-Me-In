@page "/Account/Recovery/{AccountID}/ResetPassword"
@inject Context dbContext
@inject NavigationManager navigationManager
@using Microsoft.EntityFrameworkCore
@inject AuthenticationService authService
@inject IJSRuntime JSRuntime

@code {
    [Parameter]
    public string AccountID { get; set; }
    private string newPassword;
    private string confirmPassword;
    private bool isChanged = false;
    private bool isSubmitted = false;
    private bool wrongPassword = false;
    private bool PasswordsMatch => !string.IsNullOrEmpty(newPassword) && !string.IsNullOrEmpty(confirmPassword) &&
        newPassword == confirmPassword;

    private void CheckPasswords()
    {
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        var accountIdToCheck = 1;
        var isLoggedIn = authService.IsUserLoggedIn(accountIdToCheck);

        if (!isLoggedIn)
        {
            navigationManager.NavigateTo("/Forbidden"); 
        }
    }

    private void resetPassword()
    {
        if (string.IsNullOrEmpty(newPassword) || string.IsNullOrEmpty(confirmPassword))
        {
            // Display message if either of the password fields is empty
            isChanged = false;
            isSubmitted = true;
            wrongPassword = false;
            return;
        }

        if (newPassword == confirmPassword)
        {
            var user = dbContext.Accounts.FirstOrDefault(u => u.AccountID == int.Parse(AccountID));

            if (user != null)
            {
                // Hash the new password
                string hashedPassword = BCrypt.Net.BCrypt.HashPassword(newPassword);

                // Update the hashed password in the database
                user.PasswordHash = hashedPassword;
                dbContext.SaveChanges();
                isChanged = true;
                isSubmitted = true;
            }
            else
            {
                // if user is not found
                Console.WriteLine("User not found.");
            }
        }
        else
        {
            // if passwords do not match
            wrongPassword = true;
            isChanged = false;
            isSubmitted = true;
        }
    }

    private void GoBackToAccounts()
    {
        navigationManager.NavigateTo("/Account");
    }
}

<div class="container custom-container card shadow-lg py-4">
    @if (!isChanged)
    {
        <div class="row">
            <div class="form-group">
                <div class="input-group">
                    <div class="col-md-12">
                        <label class="text-start d-block">New Password</label>
                        <input type="password" class="form-control w-100 shadow-none" @bind="@newPassword" @oninput="CheckPasswords"
                            required>
                    </div>
                </div>
            </div>
        </div>
        <div class="row pt-3">
            <div class="form-group">
                <div class="input-group">
                    <div class="col-md-12">
                        <label class="text-start d-block">Confirm Password</label>
                        <input type="password" class="form-control w-100 shadow-none" @bind="@confirmPassword"
                            @oninput="CheckPasswords" required>
                    </div>
                </div>
            </div>
        </div>
        <div class="row mt-4">
            <div class="col-md-6">
                <button class="btn btn-primary btn-block mb-4" @onclick="GoBackToAccounts">Go Back</button>
            </div>
            <div class="col-md-6">
                <button class="btn btn-primary btn-block mb-4" @onclick="resetPassword">Reset Password</button>
            </div>
        </div>
        @if ((isChanged || isSubmitted) && (string.IsNullOrEmpty(newPassword) || string.IsNullOrEmpty(confirmPassword)))
        {
            <div class="alert alert-warning mt-3 text-center" role="alert">
                Please fill in both password fields.
            </div>
        }
        @if (wrongPassword)
        {
            <div class="alert alert-warning mt-3" role="alert">
                Passwords do not match.
            </div>
        }
    }
    else if (isChanged)
    {
        <div class="row px-3 justify-content-center">
            <div class="alert alert-success mt-3 text-center" role="alert">
                Password was successfully changed.
            </div>
        </div>
        <div class="row mt-3 text-center">
            <div class="col-md-12 d-flex justify-content-center">
                <button class="btn btn-primary btn-block w-100" @onclick="GoBackToAccounts">Done</button>
            </div>
        </div>
    }
</div>
