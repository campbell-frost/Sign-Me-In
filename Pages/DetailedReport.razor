@page "/Reports/Detailed/{startDate}/{endDate}"
@inject NavigationManager navigationManager
@inject Context dbContext

@code {
    [Parameter] public string startDate { get; set; }
    [Parameter] public string endDate { get; set; }

    private List<HubSession> hubSessions = new List<HubSession>();

    // Variables for client-side pagination
    int currentPage = 1;
    int pageSize = 10;
    int totalItems;
    int totalPages;
    string searchTerm = "";

    protected override void OnInitialized()
    {
        // Parse the start and end date strings into DateTime objects
        if (DateTime.TryParse(startDate, out DateTime parsedStartDate) && DateTime.TryParse(endDate, out DateTime parsedEndDate))
        {
            // Query the database to retrieve hub session data for the selected date range
            hubSessions = dbContext.HubSessions
                .Where(session => session.Date >= parsedStartDate && session.Date <= parsedEndDate)
                .ToList();

            // Calculate the total number of items and pages
            totalItems = hubSessions.Count;
            totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
        }
    }

    private IEnumerable<HubSession> GetPaginatedSessions()
    {
        // Calculate the range of items to display for the current page
        int startIndex = (currentPage - 1) * pageSize;
        int endIndex = Math.Min(startIndex + pageSize, totalItems);

        // Return the items for the current page
        return hubSessions.Skip(startIndex).Take(endIndex - startIndex);
    }

    private string GetStudentName(int studentID)
    {
        var student = dbContext.Students.FirstOrDefault(s => s.StudentID == studentID);
        return student != null ? $"{student.FirstName} {student.LastName}" : "N/A";
    }

    void ChangePage(int page)
    {
        currentPage = page;
    }

    private void gobacktoReports(){
        navigationManager.NavigateTo("/Reports");
    }

  private void HandleSearch()
    {
        // Clear the current list of hubSessions
        hubSessions.Clear();

        // Query the database to retrieve hub session data for the selected date range
        if (DateTime.TryParse(startDate, out DateTime parsedStartDate) && DateTime.TryParse(endDate, out DateTime parsedEndDate))
        {
            hubSessions = dbContext.HubSessions
                .Where(session => session.Date >= parsedStartDate && session.Date <= parsedEndDate)
                .ToList();

            // Filter hubSessions to include only sessions where the student's name matches the search term
            hubSessions = hubSessions
                .Where(session => GetStudentName(session.StudentID).IndexOf(searchTerm, StringComparison.OrdinalIgnoreCase) >= 0)
                .ToList();

            // Recalculate the total number of items and pages
            totalItems = hubSessions.Count;
            totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
        }
    }

     string FormatTotalTime(TimeSpan? totalTime)
{
    if (totalTime.HasValue)
    {
        int hours = totalTime.Value.Hours;
        int minutes = totalTime.Value.Minutes;
        int seconds = totalTime.Value.Seconds;

        if (hours > 0 && minutes > 0)
        {
            return $"{hours} hr {minutes} min";
        }
        else if (hours > 0)
        {
            return $"{hours} hr";
        }
        else if (minutes > 0)
        {
            return $"{minutes} min";
        }
        else
        {
            return $"{seconds} sec";
        }
    }
    else
    {
        return "N/A"; // default value for null 
    }
}


}

<div class="container">
    <div class="row pt-4">
        <div class="col-md-6">

        <form @onsubmit="HandleSearch">
                <div class="form-group">
                    <div class="input-group mx-auto">
                        <input type="search" class="form-control shadow-none" placeholder="Search for Student"
                            @bind="searchTerm" autofocus />
                        <span class="input-group-btn">
                            <button type="submit" class="btn btn-default shadow-none my-auto">
                                <img src="search-icon.png" class="search-icon">
                            </button>
                        </span>
                    </div>
                </div>
            </form>
        </div>
            <div class="col-md-6">
                
            <div class="alert alert-info">Selected Date Range: From "@startDate" to "@endDate"</div>
        </div>
    </div>
    <table class="table">
        <thead>
            <tr class="table-header">
                <th> Date</th>
                <th>Student ID</th>
                <th>Student Name</th>
                <th>Total Time</th>
                <th>Session Type</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var session in GetPaginatedSessions())
            {
                <tr>
                    <td>@session.Date.ToString("MM/dd/yyyy") @session.TimeIn</td>
                    <td>@session.StudentID</td>
                    <td>@(GetStudentName(session.StudentID))</td>
                    <td>@FormatTotalTime(session.TimeOut - session.TimeIn)</td>
                    <td>@session.SessionType</td>
                </tr>
            }
        </tbody>
    </table>
    <div class="row pagination-container pl-1">
        <ul class="col-md-11 pagination" style="padding-left: 15px;">
            @for (int page = 1; page <= totalPages; page++)
            {
                int localPage = page; // Create a local copy of page
                <li class="page-item @(localPage == currentPage ? "active" : "")">
                    <a class="page-link" @onclick="() => ChangePage(localPage)">@localPage</a>
                </li>
            }
        </ul>
    </div>
    <div class="row">
        <div class="col-md-12 d-flex justify-content-between">
            <button class="btn btn-primary" @onclick="gobacktoReports">Go Back</button>
            <button class="btn btn-primary">Export</button>
        </div>
    </div>

</div>

