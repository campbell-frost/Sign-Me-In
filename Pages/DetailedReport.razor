@page "/Reports/Detailed/{startDate}/{endDate}"
@inject NavigationManager navigationManager
@inject Context dbContext
@inject AuthenticationService authService
@using System.Text
@inject IJSRuntime JSRuntime

@code {
    // Parameters for the start and end dates
    [Parameter] public string startDate { get; set; }
    [Parameter] public string endDate { get; set; }

    private bool showNoDataMessage = false;     // Boolean property to track whether to show the no data message

    private List<HubSession> hubSessions = new List<HubSession>();     // List to store hub session data

    // Variables for client-side pagination
    int currentPage = 1;
    int pageSize = 10;
    int totalItems;
    int totalPages;
    string searchTerm = "";

    // Initialization method
    protected override void OnInitialized()
    {
        var accountIdToCheck = 1;
        var isLoggedIn = authService.IsUserLoggedIn(accountIdToCheck);

        if (!isLoggedIn)
        {
            // Redirect to forbidden page if the user is not logged in
            navigationManager.NavigateTo("/Forbidden");
        }

        // Parse the start and end date strings into DateTime objects
        if (DateTime.TryParse(startDate, out DateTime parsedStartDate) && DateTime.TryParse(endDate, out DateTime parsedEndDate))
        {
            // Query the database to retrieve hub session data for the selected date range
            hubSessions = dbContext.HubSessions
                .Where(session => session.Date >= parsedStartDate && session.Date <= parsedEndDate && !session.TimeOut.Equals(null))
                .ToList();
                
            hubSessions.Reverse();

            // Calculate the total number of items and pages
            totalItems = hubSessions.Count;
            totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
        }
    }

    // Method to get paginated hub sessions
    private IEnumerable<HubSession> GetPaginatedSessions()
    {
        // Calculate the range of items to display for the current page
        int startIndex = (currentPage - 1) * pageSize;
        int endIndex = Math.Min(startIndex + pageSize, totalItems);

        // Return the items for the current page
        return hubSessions.Skip(startIndex).Take(endIndex - startIndex);
    }

    // Method to get student name based on student ID
    private string GetStudentName(int studentID)
    {
        var student = dbContext.Students.FirstOrDefault(s => s.StudentID == studentID);
        return student != null ? $"{student.FirstName} {student.LastName}" : "N/A";
    }

    // Method to change the current page
    void ChangePage(int page)
    {
        currentPage = page;
    }

    // Method to move pages based on offset
    void MovePages(int offset)
    {
        currentPage += offset;
    }

    // Method to get the range of pages for pagination
    IEnumerable<int> GetPageRange()
    {
        int startPage = Math.Max(1, currentPage - 4);
        int endPage = Math.Min(totalPages, startPage + 9);
        return Enumerable.Range(startPage, endPage - startPage + 1);
    }

    // Method to navigate back to the Reports page
    private void gobacktoReports()
    {
        navigationManager.NavigateTo("/Reports");
    }

    // Method to handle search functionality
    private void HandleSearch()
    {
        // Clear the current list of hubSessions
        hubSessions.Clear();

        // Query the database to retrieve hub session data for the selected date range
        if (DateTime.TryParse(startDate, out DateTime parsedStartDate) && DateTime.TryParse(endDate, out DateTime parsedEndDate))
        {
            hubSessions = dbContext.HubSessions
                .Where(session => session.Date >= parsedStartDate && session.Date <= parsedEndDate && !session.TimeOut.Equals(null))
                .ToList();

            // Filter hubSessions to include only sessions where the student's name matches the search term
            hubSessions = hubSessions
                .Where(session => GetStudentName(session.StudentID).IndexOf(searchTerm, StringComparison.OrdinalIgnoreCase) >= 0)
                .ToList();

            // Recalculate the total number of items and pages
            totalItems = hubSessions.Count;
            totalPages = (int)Math.Ceiling((double)totalItems / pageSize);

            // Adjust the current page
            currentPage = 1;
        }
    }

    // Method to format total time into a readable string
    private string FormatTotalTime(TimeSpan totalTime)
    {
        int hours = totalTime.Hours;
        int minutes = totalTime.Minutes;
        int seconds = totalTime.Seconds;

        if (hours > 0 && minutes > 0)
        {
            return $"{hours} hr {minutes} min";
        }
        else if (hours > 0)
        {
            return $"{hours} hr";
        }
        else if (minutes > 0)
        {
            return $"{minutes} min";
        }
        else
        {
            return $"{seconds} sec";
        }
    }

    // Method to generate a CSV file from the hubSessions list
    private string GenerateCSV()
    {
        StringBuilder csvContent = new StringBuilder();

        // CSV header
        csvContent.AppendLine("Date,Student ID,Student Name,Total Time,Session Type");

        foreach (var session in hubSessions)
        {
            csvContent.AppendLine($"{session.Date.ToString("MM/dd/yyyy")} {session.TimeIn}," +
                $"{session.StudentID},{GetStudentName(session.StudentID)}," +
                $"{((session.TimeOut - session.TimeIn) != null ? FormatTotalTime((session.TimeOut - session.TimeIn).Value) : "")}," +
                $"{session.SessionType}");
        }

        return csvContent.ToString();
    }

    // Method to trigger the download of the CSV file
    private async Task DownloadCSV()
    {
        if (hubSessions.Any())
        {
            DateTime fromDate = hubSessions.Min(s => s.Date);
            DateTime toDate = hubSessions.Max(s => s.Date);

            var csvContent = GenerateCSV();

            var filename = $"HubSessions_from_{fromDate:MM-dd-yyyy}_to_{toDate:MM-dd-yyyy}.csv";

            // Create a Blob
            var bytes = Encoding.UTF8.GetBytes(csvContent);
            var base64 = Convert.ToBase64String(bytes);
            var uri = $"data:text/csv;base64,{base64}";

            // Calls the downloadFile method located in App.razor
            await JSRuntime.InvokeVoidAsync("downloadFile", filename, uri);
        }
        else
        {
            // Handle the case when hubSessions is empty

            // Set the boolean property to true to indicate that there is no data
            showNoDataMessage = true;

            // Update the UI
            StateHasChanged();
        }
    }
}

<div class="container card shadow-lg mb-3">
    <div class="row">
        <div class="col-md-6 pt-4">
            <form @onsubmit="HandleSearch">
                <div class="form-group">
                    <div class="input-group mx-auto">
                        <input type="search" class="form-control shadow-none" placeholder="Search for Student"
                               @bind="searchTerm" autofocus />
                        <span class="input-group-btn">
                            <button type="submit" class="btn btn-default shadow-none my-auto">
                                <img src="search-icon.png" class="search-icon">
                            </button>
                        </span>
                    </div>
                </div>
            </form>
        </div>
        <div class="col-md-6 pt-4">
            <div class="alert alert-info">Selected Date Range: From "@startDate" to "@endDate"</div>
        </div>
    </div>
    <div style="overflow-x: auto">
        <!-- Hub Sessions table -->
        <table class="table">
            <thead>
                <tr class="table-header text-nowrap">
                    <th>Date</th>
                    <th>Student ID</th>
                    <th>Student Name</th>
                    <th>Total Time</th>
                    <th>Session Type</th>
                </tr>
            </thead>
            <tbody>
                <!-- Display paginated hub sessions -->
                @foreach (var session in GetPaginatedSessions())
                {
                    <tr>
                        <td class="text-nowrap">@($"{session.Date:MM/dd/yyyy} at {DateTime.Today.Add(session.TimeIn).ToString("h:mm:ss tt")}")</td>
                        <td>@session.StudentID</td>
                        <td class="text-nowrap">@(GetStudentName(session.StudentID))</td>
                        <td>@((session.TimeOut - session.TimeIn) != null ? FormatTotalTime((session.TimeOut -
                            session.TimeIn).Value) : "")</td>
                        <td>@session.SessionType</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="row pagination-container pl-1">
        <ul class="col-md-11 pagination" style="padding-left: 15px;">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <a class="page-link" @onclick="() => MovePages(-1)" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
            @foreach (var pageNumber in GetPageRange())
            {
                <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                    <a class="page-link" @onclick="() => ChangePage(pageNumber)">@pageNumber</a>
                </li>
            }

            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <a class="page-link" @onclick="() => MovePages(1)" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        </ul>
    </div>
    <div class="row">
        <div class="col-md-12 d-flex justify-content-between mb-3">
            <button class="btn btn-primary" @onclick="gobacktoReports">Go Back</button>
            <button class="btn btn-primary" @onclick="DownloadCSV">Export</button>
        </div>
    </div>
    @if (showNoDataMessage)
    {
        <div class="alert alert-warning mt-3" role="alert">
            No hub session(s) available for CSV download.
        </div>
    }
</div>
