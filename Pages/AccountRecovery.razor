@page "/Account/AccountRecovery/{AccountID}"
@inject Context dbContext
@inject NavigationManager navigationManager
@using Microsoft.EntityFrameworkCore

@code
{  
    private List<SecurityQuestion> ? SecurityQuestions;
    [Parameter]
    public String AccountID { get; set; }
    private String checkAnswer{get; set;}

    private void getSecurityQuestions()
    {
        @* Parse the string to an integer *@
        if (int.TryParse(AccountID, out int accountId))
        {
             // Fetch security questions from the database for the specified AccountID
            SecurityQuestions = dbContext.SecurityQuestions
                .Where(q => q.AccountID == accountId)
                .ToList();
        }
        else
        {
            navigationManager.NavigateTo("/Account");
        }
    }

    protected override void OnInitialized()
    {
             getSecurityQuestions();
    }
    
    private void GoBackToAccounts()
    {
        navigationManager.NavigateTo("/Account");
    }


    private bool ValidateSecurityQuestions()
    {
        foreach (var question in SecurityQuestions)
        {
            if (string.IsNullOrEmpty(question.AnswerHash))
            {
                return false;
            }

            // Retrieve the stored answer from the database based on the question ID
            var storedAnswer = GetStoredAnswerFromDatabase(question.QuestionID);

            // Check if the stored answer is not null and matches the provided answer
            if (storedAnswer != null && checkAnswer == storedAnswer)
            {
                // Answer matches the stored one
                continue; // Move on to the next question
            }
            else
            {
                // Answer doesn't match the stored one
                return false; // Exit the loop and return false
            }
        }
        return true; // Security questions' answers are valid
    }

    private string GetStoredAnswerFromDatabase(int questionID)
    {
        // Replace this with your logic to fetch the stored answer from the database
        // Example: You might use dbContext to query the database
        var storedAnswer = dbContext.SecurityQuestions
            .Where(q => q.QuestionID == questionID)
            .Select(q => q.AnswerHash)
            .FirstOrDefault();

        return storedAnswer;
    }

    private void GoToChangePassword()
    {
        if (ValidateSecurityQuestions()){
            navigationManager.NavigateTo($"/Account/ChangePassword/{AccountID}/ResetPassword");
        }
    }

}

<div class="content p-5">
    <div class="row">
    @for (var i = 0; i < SecurityQuestions.Count; i++)
    {
        var question = SecurityQuestions[i];

        <div class="col-md-4">
            <div class="mb-3">
                <div>
                    <h4><b>@($"Question {i + 1}")</b></h4>
                </div>
                <div>
                    <h5>@question.Question</h5>
                </div>
                <div>
                    <input type="text" class="form-control" />
                </div>
            </div>
        </div>
    }
    </div>
    <div class="row">
        <div class="col-md-12 d-flex justify-content-between">
            <button class="btn btn-primary" @onclick="GoBackToAccounts">Go Back</button>
            <button class="btn btn-primary" @onclick="GoToChangePassword">Reset Password</button>
        </div>
    </div>

    @* @if (!ValidateSecurityQuestions())
    {
        <div class="alert alert-danger mt-5" role="alert">
            Security question answers are incorrect. Please check your answers.
        </div>
    } *@
</div>
