@page "/Sign-In"
@using Microsoft.EntityFrameworkCore;
@using System.Threading.Tasks;
@inject Context dbContext
@inject AuthenticationService authService
@inject NavigationManager navigationManager

@code {
    // --- SEARCH FUNCTIONALITY VARIABLES ---
    private string searchTerm = ""; // The term used to search for students
    private List<Student>? foundStudents; // List of students that match the search term
    private Student? foundStudent; // The selected student
    private bool isLoading = false; // Indicates if the search is currently running
    private bool searchPerformed = false; // Indicates if a search has been made
    private bool isLogoVisible = true; // Determines the visibility of the logo on the UI
    private bool isSignedIn = false; // Indicates if a student has successfully signed in
    private bool showSelectionError; // Indicates that initials or session type are empty
    private bool alreadySignedIn = false; // Indicates if the student is already signed in without being signed out
     private bool isSearchTermInvalid = false; // variable to track validation status

    // --- DROPDOWN MENU VARIABLES ---
    private string? selectedInitials; // The initials selected from the dropdown
    private string? selectedSessionType; // The session type selected from the dropdown
    private List<string?>? initials; // List of available initials for dropdown

    protected override void OnInitialized()
    {
        var accountIdToCheck = 2;
        var isLoggedIn = authService.IsUserLoggedIn(accountIdToCheck);

        if (!isLoggedIn)
        {
            navigationManager.NavigateTo("/Forbidden");
        }
    }
    // Handles the search function
    private async Task HandleSearch()
    {
        isLoading = true;
        foundStudents = null; // Clear previous search results
        foundStudent = null; // Clear the previously found student

        // Reset validation status
        isSearchTermInvalid = false;
        
        // Handle empty search term
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            isSearchTermInvalid = true;
            return;
        }

        // Query the database to find students by first or last name
        foundStudents = await dbContext.Students
        .Include(s => s.Course)
        .Include(s => s.Instructor)
        .Where(s => s.FirstName == searchTerm || s.LastName == searchTerm)
        .ToListAsync();

        // Query the database to retrieve distinct employee initials
        initials = await dbContext.HubEmployees
        .Select(e => e.Initials)
        .Distinct()
        .ToListAsync();

        isLoading = false;
        searchPerformed = true;
        isLogoVisible = false;

        if (foundStudents.Count == 1)
        {
            // If only one student is found, assign it to foundStudent
            foundStudent = foundStudents.First();

            // Check if the student is already signed in without a sign-out
            var existingSession = await dbContext.HubSessions.FirstOrDefaultAsync(s => s.StudentID == foundStudent.StudentID &&
            !s.TimeOut.HasValue);
            if (existingSession != null)
            {
                alreadySignedIn = true;
            }
        }
    }

    // Add a method to select a student from the list
    private void SelectStudent(Student student)
    {
        // Check if the selected student is already signed in without a sign-out
        var existingSession = dbContext.HubSessions.FirstOrDefault(s => s.StudentID == student.StudentID &&
        !s.TimeOut.HasValue);

        if (existingSession != null)
        {
            alreadySignedIn = true;
        }
        else
        {
            foundStudent = student;
            foundStudents = null; // Clear the list of found students
        }
    }

    // Handles the sign-in function
    private async Task HandleSignIn()
    {
        if (string.IsNullOrWhiteSpace(selectedInitials) || string.IsNullOrWhiteSpace(selectedSessionType))
        {
            showSelectionError = true;
            return;
        }
        // Check if the student is already signed in without a sign-out
        var existingSession = await dbContext.HubSessions.FirstOrDefaultAsync(s => s.StudentID == foundStudent.StudentID &&
        !s.TimeOut.HasValue);
        if (existingSession != null)
        {
            alreadySignedIn = true;
            return;
        }
        else
        {
            // Create a new session entry
            var newSession = new HubSession
                {
                    TimeIn = TimeSpan.Parse(DateTime.Now.ToString("HH:mm:ss")),
                    SessionType = selectedSessionType,
                    StudentID = foundStudent.StudentID, // Use foundStudent here
                    Date = DateTime.Now,
                    EmployeeID = dbContext.HubEmployees.FirstOrDefault(e => e.Initials == selectedInitials)?.EmployeeID ?? 0
                };

            // Add the new session to the database
            dbContext.HubSessions.Add(newSession);
            await dbContext.SaveChangesAsync();

            isSignedIn = true;

            // Clear the selected values and search term
            selectedInitials = "";
            selectedSessionType = "";
            searchTerm = "";

            StateHasChanged();

            await Task.Delay(3000); // 3 second timer

            // Resets fields
            ResetSignIn();

        }
    }

    // Reset state to allow a new sign-in
    private void ResetSignIn()
    {
        isSignedIn = false;
        searchPerformed = false;
        foundStudents = null;
        searchTerm = "";
        alreadySignedIn = false;
    }
}

<!-- HTML code for rendering the sign-in -->
<PageTitle>Sign-In 😀</PageTitle>
<div class="container-lg">
    <div class="logo-container pt-5 pb-3 text-center @(searchPerformed && !isLogoVisible ? "logo-move-up" : "")">
        <img src="/logo-transparent.png" class="image">
    </div>
</div>

<div class="container-md pt-5">
    <div class="content-container card @(searchPerformed && !isLogoVisible ? "content-move-up shadow-lg" : "")">
        <form @onsubmit="HandleSearch">
            <div class="pt-4">
                <div class="form-group">
                    <div class="input-group mx-auto">
                        <input type="search" class="form-control shadow-none md-form" placeholder="Search for Student"
                            @bind="searchTerm" autofocus />
                        <span class="input-group-btn">
                            <button type="submit" class="btn btn-default shadow-none">
                                <img src="search-icon.png" class="search-icon">
                            </button>
                        </span>
                    </div>
                </div>
            </div>
        </form>

        @if (isSearchTermInvalid)
        {
            <div class="alert alert-info">Please enter a valid search term.</div>
        }

        @if (isSignedIn)
        {
            <div class="form-group text-center pt-5">
                <div class="alert alert-info">Student signed in successfully!</div>
            </div>
        }

        @if (isLoading && !isSearchTermInvalid)
        {
            <div class="form-group text-center pt-5">
                <img src="loading.gif">
            </div>
        }
        else if (searchPerformed)
        {
            @if (foundStudents?.Count > 1 && !alreadySignedIn)
            {
                <div class="alert alert-info mt-3">
                    @foundStudents.Count @(" students found with the same name. Select one to continue.")
                </div>

                @foreach (var student in foundStudents)
                {
                    if (student != null && !alreadySignedIn)
                    {
                        <StudentCard Student="@student" OnSelectStudent="SelectStudent" />
                    }
                }
            }
            else if (alreadySignedIn) 
            // Figure out how to redo logic in this code block.  
            // Either have a sign out button or reset alreadySignedIn
            {
                <div class="alert alert-warning mt-4">The student is already signed in. Please sign them out from the View page first
                    before signing in again. </div>
                <div class="text-center mb-4">
                    <button class="btn btn-primary" @onclick="ResetSignIn">Sign in another student</button>
                </div>
                
            }


            else if (foundStudent != null && !isSignedIn)
            {
                if (!alreadySignedIn && foundStudent != null)
                {

                    <div class="row pt-3">
                        <div class="col-md-6 mx-auto">
                            <div class="form-group">
                                <label>First Name:</label>
                                <input type="text" class="form-control shadow-none border-0 read-only" readonly
                                    value="@foundStudent.FirstName" />
                            </div>
                        </div>
                        <div class="col-md-6 mx-auto">
                            <div class="form-group">
                                <label>Last Name:</label>
                                <input type="text" class="form-control shadow-none border-0 read-only" readonly
                                    value="@foundStudent.LastName" />
                            </div>
                        </div>
                    </div>
                    <div class="row py-3">
                        <div class="col-md-6 mx-auto">
                            <div class="form-group">
                                <label>Course:</label>
                                <input type="text" class="form-control shadow-none border-0 read-only" readonly
                                    value="@foundStudent.Course.CourseName" />
                            </div>
                        </div>
                        <div class="col-md-6 mx-auto">
                            <div class="form-group">
                                <label>Instructor:</label>
                                <input type="text" class="form-control shadow-none border-0 read-only" readonly
                                    value="@foundStudent?.Instructor.FirstName @foundStudent.Instructor.LastName" />
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div class="row pt-3">
                        <div class="col-md-6 mx-auto">
                            <div class="form-group">
                                <div class="input-group">

                                    <select class="select" @bind="selectedInitials">
                                        <option value="">Select Initials</option>
                                        @foreach (var initial in initials)
                                        {
                                            <option value="@initial">@initial</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 mx-auto">
                            <div class="form-group">
                                <div class="input-group">

                                    <select class="select" @bind="selectedSessionType">
                                        <option value="">Select Session Type</option>
                                        <option value="Tutoring">Tutoring</option>
                                        <option value="Testing">Testing</option>
                                    </select>
                                </div>
                            </div>

                        </div>
                    </div>
                    <div class="row pt-5">
                        <div class="col-md-12 mx-auto text-center pb-3 ">
                            <button class="btn btn-primary btn-block w-100 btn-sign-in" @onclick="HandleSignIn">Sign-In</button>
                        </div>
                        @if (showSelectionError)
                        {
                            <div class="col-md-12 mx-auto text-center pt-4">
                                <div class="alert alert-warning">Please select initials and session type before signing in.</div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="alert alert-danger">ELSE ERROR</div>
                }
            }
            else if (!isSignedIn)
            {
                <div class="form-group text-center alert alert-warning mt-3">
                    <label>No students found with the name '@searchTerm'.</label>
                </div>
            }
        }
    </div>
</div>
